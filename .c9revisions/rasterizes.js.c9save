{"ts":1373762620702,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var webpage = require('webpage'),\n    system = require('system'),\n    address, output, size;\nvar fs = require('fs');\n\n// read urls from file\nvar urlList = fs.read(\"urls.txt\");\n//console.log(urlList);\nvar urlArray = urlList.split(\"\\n\");\n//console.log(urlArray);\n\nvar Pile = function() {\n  this.pile = [];\n  this.concurrency = 0;\n  this.done = null;\n  this.max_concurrency = 10;\n};\n\nPile.prototype = {\n  add: function (callback) {\n    this.pile.push(callback);\n  },\n  run: function (done,max_concurrency) {\n    this.done = done || this.done;\n    this.max_concurrency = max_concurrency||this.max_concurrency;\n    var target = this.pile.length;\n    var that = this;\n    var next = function() {\n      that.concurrency--;\n      target--;\n      if(target === 0){\n        that.done();\n      } else {\n        that.run();\n      }\n    };\n    while(this.concurrency<this.max_concurrency && this.pile.length > 0) {\n      this.concurrency++;\n      var callback = this.pile.shift();\n      callback(next);\n    }\n  }\n};\n\nvar pilex = new Pile();\n\nfor(var i = 100; i < urlArray.length; i++) {\n  pilex.add(make_handler(i));\n}\npilex.run(function () {\n  console.log(\"fetch done.\");\n  finish();\n},1);\n\n\nfunction finish() {\nphantom.exit();\n}\n\nfunction make_handler(num) {\n  return function (next) {\n    console.log(\"fetching : \"+urlArray[num]);\n    var page = webpage.create();\n    page.viewportSize = {width:960};\n    page.paperSize = {format:\"A4\",orientation:\"portrait\",margin:\"1cm\"};\n    page.open(urlArray[num], function (status) {\n      if (status !== 'success') {\n        console.log('Unable to load the address! : '+urlArray[num]);\n        next();\n      } else {\n        window.setTimeout(function () {\n          page.render(num+\".pdf\");\n          console.log(\"done : \"+num);\n          next(); \n        },200);\n      }\n    });\n  }\n}\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":1818}]],"length":1818}
{"contributors":[],"silentsave":false,"ts":1373841828506,"patch":[[{"diffs":[[0,"om file\n"],[1,"//"],[0,"var urlL"]],"start1":133,"start2":133,"length1":16,"length2":18},{"diffs":[[0,"urls.txt\");\n"],[1,"if (process.argv.length <= 2) {\n    console.log('Usage: node rasterizes.js [FILE]');\n    process.exit(1);\n}\n\n// HTMLコンテンツを読み込む\n// コマンドライン起動前提なので同期I/Oで\nvar urlList = fs.readFileSync(process.argv[2], 'utf8');\n\n"],[0,"//console.lo"]],"start1":166,"start2":166,"length1":24,"length2":232}]],"length":2028,"saved":false}
{"ts":1373842076918,"patch":[[{"diffs":[[0,"ge')"],[-1,",\n    system = require('system'),\n    address, output, size"],[0,";\nva"]],"start1":28,"start2":28,"length1":67,"length2":8}]],"length":1969,"saved":false}
{"ts":1373842099466,"patch":[[{"diffs":[[0,"ish() {\n"],[1,"    "],[0,"phantom."]],"start1":1343,"start2":1343,"length1":16,"length2":20}]],"length":1973,"saved":false}
